-- DBS211 ZGG Final Project Milestone 3-Group 8

-- CREATE TABLE Properties (
--     PropertyID INT IDENTITY(1,1) PRIMARY KEY,
--     OwnerID INT NOT NULL,
--     Address VARCHAR(255) NOT NULL,
--     PropertyType VARCHAR(100) CHECK (PropertyType IN ('House', 'Condo', 'Apartment', 'Townhouse')),
--     Status VARCHAR(50) CHECK (Status IN ('Available', 'Occupied')),
--     RentPrice INT,
--     FOREIGN KEY (OwnerID) REFERENCES Owners(OwnerID)
-- )


-- CREATE TABLE Owner (
--     OwnerID INT IDENTITY(1,1) PRIMARY KEY,
--     FirstName VARCHAR(100) NOT NULL,
--     LastName VARCHAR(100) NOT NULL,
--     ContactNumber VARCHAR(15) CHECK (ContactNumber LIKE '[0-9][0-9][0-9]-[0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]'),
--     Email VARCHAR(100) NOT NULL
-- )


-- CREATE TABLE Payment (
--     PaymentID INT IDENTITY(1,1) PRIMARY KEY,
--     LeaseID INT NOT NULL,
--     PaymentDate DATE NOT NULL,
--     AmountToPay DECIMAL(8,2) NOT NULL,
--     Status VARCHAR(50) CHECK (Status IN ('Available', 'Occupied')),
--     PayMethod VARCHAR(50) CHECK (Method IN ('Cheque', 'Credit', 'Cash')),
--     Purpose VARCHAR(50),
--     FOREIGN KEY (LeaseID) REFERENCES Lease_Agreement(LeaseID)
-- )


-- CREATE TABLE Tenants (
--     TenantID INT IDENTITY(1,1) PRIMARY KEY,
--     FirstName VARCHAR(50) NOT NULL,
--     LastName VARCHAR(50) NOT NULL,
--     ContactNumber VARCHAR(15) CHECK (ContactNumber LIKE '[0-9][0-9][0-9]-[0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]'),
--     CreditScore INT NOT NULL,
--     Email VARCHAR(100) NOT NULL
-- )


-- CREATE TABLE LeaseAgreement (
--     LeaseID INT PRIMARY KEY,
--     unitID INT NOT NULL,
--     agentID INT NOT NULL,
--     StartDate DATE NOT NULL,
--     EndDate DATE NOT NULL,
--     FOREIGN KEY (unitID) REFERENCES Unit(unitID),
--     FOREIGN KEY (agentID) REFERENCES Employee(employeeID)
-- )


-- CREATE TABLE MaintenanceRequests (
--     requestID INT PRIMARY KEY,
--     unitID INT NOT NULL,
--     reportTo INT NOT NULL,
--     requestDate DATE NOT NULL,
--     issueDescription VARCHAR(MAX) NOT NULL,
--     vendorID INT NOT NULL,
--     cost INT NOT NULL,
--     status VARCHAR(100) CHECK (status IN ('Open', 'In Progress', 'Closed')),
--     FOREIGN KEY (vendorID) REFERENCES Vendor(vendorID),
--     FOREIGN KEY (reportTo) REFERENCES Employee(employeeID)
-- );


-- CREATE TABLE Vendors (
--     vendorID INT PRIMARY KEY,
--     serviceType VARCHAR(25) DEFAULT 'Cleaning',
--     phone VARCHAR(11) NOT NULL,
--     email VARCHAR(50) NOT NULL
-- );

-- CREATE DOMAIN PHONE_CHK AS CHAR(13) CONSTRAINT PHONE_CHK CHECK(PHONE LIKE '[0-9]{3}-[0-9]{3}-[0-9]{4}');
-- CREATE DOMAIN STATUS_CHK AS VARCHAR(20) CONSTRAINT STATUS_CHK CHECK(LOWER(STATUS) IN ('initiated', 'processing', 'completed', 'cancelled'));

-- Table: Contact
CREATE TABLE CONTACT (
    CONTACTID NUMBER(4) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    PHONE CHAR(13) NOT NULL,
    EMAIL VARCHAR(50) NOT NULL,
    MAILING_ADDRESS VARCHAR(75),
    CONSTRAINT PHONE_CHK CHECK(PHONE LIKE '[0-9]{3}-[0-9]{3}-[0-9]{4}'),
    CONSTRAINT EMAIL_CHK CHECK(EMAIL LIKE '%_@%_._%')
);

-- Table: Owner
CREATE TABLE OWNER (
    OWNERID NUMBER(4) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    FIRSTNAME VARCHAR(50) NOT NULL,
    LASTNAME VARCHAR(50) NOT NULL,
    CONTACTID NUMBER(4) NOT NULL,
    CONSTRAINT OWNER_CONTACT_FK FOREIGN KEY (CONTACTID) REFERENCES CONTACT(CONTACTID)
);

-- Table: Tenant
CREATE TABLE TENANT (
    TENANTID NUMBER(4) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    FIRSTNAME VARCHAR(50) NOT NULL,
    LASTNAME VARCHAR(50) NOT NULL,
    INCOME NUMBER(8, 2) NOT NULL,
    CREDITSCORE NUMBER(3) NOT NULL,
    CONTACTID NUMBER(4) NOT NULL,
    CONSTRAINT TENANT_CONTACT_FK FOREIGN KEY (CONTACTID) REFERENCES CONTACT(CONTACTID)
);

-- table: Vendor
CREATE TABLE VENDOR(
    VENDORID NUMBER(4) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    NAME VARCHAR(20) NOT NULL,
    SERVICETYPE VARCHAR(20) NOT NULL,
    CONTACTID NUMBER(4) NOT NULL,
    CONSTRAINT VENDOR_CONTACT_FK FOREIGN KEY (CONTACTID) REFERENCES CONTACT(CONTACTID),
    CONSTRAINT SERVICETYPE_CHK CHECK(LOWER(SERVICETYPE) IN ('cleaning', 'hygiene', 'landscaping', 'repair', 'replacement'))
);

-- table: department
CREATE TABLE DEPARTMENT(
    DEPARTMENTID NUMBER(4) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    NAME VARCHAR(20) NOT NULL,
    LOCATION VARCHAR(50) NOT NULL,
    CONTACTID NUMBER(4) NOT NULL,
    CONSTRAINT DEPARTMENT_CONTACT_FK FOREIGN KEY (CONTACTID) REFERENCES CONTACT(CONTACTID)
);

-- Table: Employee
CREATE TABLE EMPLOYEE (
    EMPLOYEEID NUMBER(4) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    FIRSTNAME VARCHAR(50) NOT NULL,
    LASTNAME VARCHAR(50) NOT NULL,
    CONTACTID NUMBER(4) NOT NULL,
    OFFICE VARCHAR(20) NOT NULL,
    DEPARTMENTID NUMBER(4) NOT NULL,
    CONSTRAINT EMPLOYEE_CONTACT_FK FOREIGN KEY (CONTACTID) REFERENCES CONTACT(CONTACTID),
    CONSTRAINT EMPLOYEE_DEPARTMENT_FK FOREIGN KEY (DEPARTMENTID) REFERENCES DEPARTMENT(DEPARTMENTID)
);

-- Table: Property
CREATE TABLE PROPERTIES (
    PROPERTYID NUMBER(4) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    ADDRESS VARCHAR(50) NOT NULL,
    NAME VARCHAR(50) NOT NULL,
    CATEGORY VARCHAR(20) NOT NULL,
    STATUS VARCHAR(20) NOT NULL,
    OWNERID NUMBER(4) NOT NULL,
    PROPERTYMANAGER NUMBER(4) NOT NULL,
    RENT_PRICE NUMBER(7, 2) NOT NULL,
    CONSTRAINT PROPERTY_OWNER_FK FOREIGN KEY (OWNERID) REFERENCES OWNER(OWNERID),
    CONSTRAINT PROPERTY_EMPLOYEE_FK FOREIGN KEY (PROPERTYMANAGER) REFERENCES EMPLOYEE(EMPLOYEEID),
    CONSTRAINT PROP_STATUS_CHK CHECK(LOWER(STATUS) IN ('available', 'occupied')),
    CONSTRAINT TYPE_CHK CHECK(LOWER(CATEGORY) IN ('house', 'condo', 'apartment', 'townhouse'))
);

-- Table: Unit
CREATE TABLE UNIT (
    UNITID NUMBER(4) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    PROPERTYID NUMBER(4) NOT NULL,
    UNITTYPE VARCHAR(20) NOT NULL,
    AREA NUMBER(7, 2) NOT NULL,
    CODE VARCHAR(10) NOT NULL,
    CONSTRAINT UNIT_PROPERTY_FK FOREIGN KEY (PROPERTYID) REFERENCES PROPERTIES(PROPERTYID)
);

-- Table: Maintain_Request
CREATE TABLE MAINTAIN_REQUEST (
    REQUESTID NUMBER(4) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    UNITID NUMBER(4) NOT NULL,
    DESCRIPTION VARCHAR(200) NOT NULL,
    DATEREQUESTED DATE NOT NULL,
    DATECOMPLETED DATE,
    STATUS VARCHAR(20) NOT NULL,
    COST NUMBER(7, 2),
    VENDORID NUMBER(4) NOT NULL,
    SUPERINTENDENT NUMBER(4) NOT NULL,
    CONSTRAINT REQ_STATUS_CHK CHECK(LOWER(STATUS) IN ('initiated', 'processing', 'completed', 'cancelled')),
    CONSTRAINT REQ_UNIT_FK FOREIGN KEY (UNITID) REFERENCES UNIT(UNITID),
    CONSTRAINT REQ_VENDOR_FK FOREIGN KEY (VENDORID) REFERENCES VENDOR(VENDORID),
    CONSTRAINT REQ_RES_FK FOREIGN KEY (SUPERINTENDENT) REFERENCES EMPLOYEE(EMPLOYEEID)
);

-- Table: Lease_aggreement
CREATE TABLE LEASE_AGGREEMENT (
    LEASEID NUMBER(4) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    UNITID NUMBER(4) NOT NULL,
    AGENTID NUMBER(4) NOT NULL,
    STARTDATE DATE NOT NULL,
    ENDDATE DATE NOT NULL,
    CONSTRAINT LEASE_UNIT_FK FOREIGN KEY (UNITID) REFERENCES UNIT(UNITID),
    CONSTRAINT LEASE_EMPLOYEE_FK FOREIGN KEY (AGENTID) REFERENCES EMPLOYEE(EMPLOYEEID)
);

-- Table: Payment
CREATE TABLE PAYMENT (
    PAYMENTID NUMBER(4) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    LEASEID NUMBER(4) NOT NULL,
    CREATED_DATE DATE NOT NULL,
    AMOUNT_TO_PAID NUMBER(7, 2) NOT NULL,
    STATUS VARCHAR(20) NOT NULL,
    METHOD VARCHAR(20) NOT NULL,
    PURPOSE VARCHAR(20) NOT NULL,
    CONSTRAINT PAYMENT_LEASE_FK FOREIGN KEY (LEASEID) REFERENCES LEASE_AGGREEMENT(LEASEID),
    CONSTRAINT PYMT_STATUS_CHK CHECK(LOWER(STATUS) IN ('initiated', 'processing', 'completed', 'cancelled')),
    CONSTRAINT PYMT_METHOD_CHK CHECK(LOWER(METHOD) IN ('cheque', 'credit', 'cash'))
);

-- table: lease_tenant
CREATE TABLE LEASE_TENANT(
    LEASEID NUMBER(4),
    TENANTID NUMBER(4),
    RENTAMOUNT NUMBER(7, 2),
    DOWNPAYMENT NUMBER(7, 2),
    PRIMARY KEY(LEASEID, TENANTID),
    CONSTRAINT LEASE_TENANT_FK FOREIGN KEY (LEASEID) REFERENCES LEASE_AGGREEMENT(LEASEID),
    CONSTRAINT TENANT_LEASE_FK FOREIGN KEY (TENANTID) REFERENCES TENANT(TENANTID)
);